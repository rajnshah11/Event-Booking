{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { graphqlRequest } from \"../graphqlClient\";\nexport const useEvents = () => {\n  _s();\n  const [events, setEvents] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const token = useSelector(state => state.auth.token);\n  const fetchEvents = useCallback(async () => {\n    setIsLoading(true);\n    const requestBody = {\n      query: `\n        query {\n          events {\n            _id\n            title\n            description\n            date\n            price\n            creator { _id }\n          }\n        }\n      `\n    };\n    try {\n      const resData = await graphqlRequest(requestBody.query);\n      if (resData.errors) {\n        console.error(\"GraphQL errors:\", resData.errors);\n        return; // Early exit on error\n      }\n      setEvents(resData.data.events);\n      console.log(\"Fetched events:\", resData.data.events); // Log the fetched events\n    } catch (error) {\n      console.error(\"Error fetching events:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n  const createEvent = async eventData => {\n    const requestBody = {\n      query: `\n        mutation CreateEvent($title: String!, $description: String!, $date: String!, $price: Float!) {\n          createEvent(eventInput: { title: $title, description: $description, date: $date, price: $price }) {\n            _id\n            title\n            description\n            date\n            price\n          }\n        }\n      `,\n      variables: {\n        title: eventData.title,\n        description: eventData.description,\n        date: eventData.date,\n        price: eventData.price\n      }\n    };\n    setIsLoading(true);\n    try {\n      const resData = await graphqlRequest(requestBody.query, requestBody.variables, token);\n      if (resData.errors) {\n        console.error(\"GraphQL errors on create:\", resData.errors);\n        return;\n      }\n      setEvents(prevEvents => [...prevEvents, resData.data.createEvent]);\n      console.log(\"Event created:\", resData.data.createEvent);\n    } catch (error) {\n      console.error(\"Error creating event:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const bookEvent = async eventId => {\n    const requestBody = {\n      query: `\n        mutation BookEvent($eventId: ID!) {\n          bookEvent(eventId: $eventId) {\n            _id\n          }\n        }\n      `,\n      variables: {\n        eventId: eventId\n      }\n    };\n    setIsLoading(true);\n    try {\n      const resData = await graphqlRequest(requestBody.query, requestBody.variables, token);\n      if (resData.errors) {\n        console.error(\"GraphQL errors on book:\", resData.errors);\n        return;\n      }\n      console.log(\"Event booked:\", resData.data.bookEvent);\n    } catch (error) {\n      console.error(\"Error booking event:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return {\n    events,\n    isLoading,\n    fetchEvents,\n    createEvent,\n    bookEvent\n  };\n};\n_s(useEvents, \"iSe6vqeO9/CjnYEOuPdaDkWyMwY=\", false, function () {\n  return [useSelector];\n});\nexport default useEvents;","map":{"version":3,"names":["useState","useCallback","useSelector","graphqlRequest","useEvents","_s","events","setEvents","isLoading","setIsLoading","token","state","auth","fetchEvents","requestBody","query","resData","errors","console","error","data","log","createEvent","eventData","variables","title","description","date","price","prevEvents","bookEvent","eventId"],"sources":["/Users/rajshah/Desktop/Event-Booking-master/client/src/controller/eventController/eventController.js"],"sourcesContent":["import { useState, useCallback } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { graphqlRequest } from \"../graphqlClient\";\n\nexport const useEvents = () => {\n  const [events, setEvents] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const token = useSelector((state) => state.auth.token);\n\n  const fetchEvents = useCallback(async () => {\n    setIsLoading(true);\n    const requestBody = {\n      query: `\n        query {\n          events {\n            _id\n            title\n            description\n            date\n            price\n            creator { _id }\n          }\n        }\n      `\n    };\n\n    try {\n      const resData = await graphqlRequest(requestBody.query);\n      \n      if (resData.errors) {\n        console.error(\"GraphQL errors:\", resData.errors);\n        return; // Early exit on error\n      }\n\n      setEvents(resData.data.events);\n      console.log(\"Fetched events:\", resData.data.events); // Log the fetched events\n    } catch (error) {\n      console.error(\"Error fetching events:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const createEvent = async (eventData) => {\n    const requestBody = {\n      query: `\n        mutation CreateEvent($title: String!, $description: String!, $date: String!, $price: Float!) {\n          createEvent(eventInput: { title: $title, description: $description, date: $date, price: $price }) {\n            _id\n            title\n            description\n            date\n            price\n          }\n        }\n      `,\n      variables: {\n        title: eventData.title,\n        description: eventData.description,\n        date: eventData.date,\n        price: eventData.price\n      }\n    };\n\n    setIsLoading(true); \n    try {\n      const resData = await graphqlRequest(requestBody.query, requestBody.variables, token);\n      \n      if (resData.errors) {\n        console.error(\"GraphQL errors on create:\", resData.errors);\n        return; \n      }\n\n      setEvents((prevEvents) => [...prevEvents, resData.data.createEvent]);\n      console.log(\"Event created:\", resData.data.createEvent);\n    } catch (error) {\n      console.error(\"Error creating event:\", error);\n    } finally {\n      setIsLoading(false); \n    }\n  };\n\n  const bookEvent = async (eventId) => {\n    const requestBody = {\n      query: `\n        mutation BookEvent($eventId: ID!) {\n          bookEvent(eventId: $eventId) {\n            _id\n          }\n        }\n      `,\n      variables: {\n        eventId: eventId\n      }\n    };\n\n    setIsLoading(true);\n    try {\n      const resData = await graphqlRequest(requestBody.query, requestBody.variables, token);\n      \n      if (resData.errors) {\n        console.error(\"GraphQL errors on book:\", resData.errors);\n        return;\n      }\n\n      console.log(\"Event booked:\", resData.data.bookEvent);\n    } catch (error) {\n      console.error(\"Error booking event:\", error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return {\n    events,\n    isLoading,\n    fetchEvents,\n    createEvent,\n    bookEvent,\n  };\n};\n\nexport default useEvents;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}