{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { graphqlRequest } from \"../graphqlClient\";\nexport const useEvents = () => {\n  _s();\n  const [events, setEvents] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const token = useSelector(state => state.auth.token);\n  const fetchEvents = useCallback(async () => {\n    setIsLoading(true);\n    setError(null); // Reset error on fetch start\n\n    const requestBody = {\n      query: `\n        query {\n          events {\n            _id\n            title\n            description\n            date\n            price\n\n          }\n        }\n      `\n    };\n    try {\n      const resData = await graphqlRequest(requestBody.query, null, token);\n      if (resData && resData.data && resData.data.events) {\n        setEvents(resData.data.events);\n      }\n    } catch (error) {\n      console.error(error); // Log error for debugging\n      setError(\"Failed to load events. Please try again.\");\n    } finally {\n      setIsLoading(false);\n    }\n  }, [token]); // Make sure to include token if needed\n\n  const createEvent = async eventData => {\n    const requestBody = {\n      query: `\n        mutation CreateEvent($title: String!, $description: String!, $date: String!, $price: Float!) {\n          createEvent(eventInput: { title: $title, description: $description, date: $date, price: $price }) {\n            _id\n            title\n            description\n            date\n            price\n            creator {\n              _id\n            }\n          }\n        }\n      `,\n      variables: {\n        title: eventData.title,\n        description: eventData.description,\n        date: eventData.date,\n        price: eventData.price\n      }\n    };\n    try {\n      const resData = await graphqlRequest(requestBody.query, requestBody.variables, token);\n      console.log('Created Event:', resData.data.createEvent);\n\n      // Option 1: Append the new event to the current list\n      setEvents(prevEvents => [...prevEvents, resData.data.createEvent]);\n\n      // Option 2: Refetch the events list after creating a new event\n      // await fetchEvents();\n    } catch (error) {\n      console.error('Failed to create event:', error);\n      setError(\"Failed to create event. Please try again.\");\n    }\n  };\n  const bookEvent = async eventId => {\n    const requestBody = {\n      query: `\n        mutation BookEvent($eventId: ID!) {\n          bookEvent(eventId: $eventId) {\n            _id\n          }\n        }\n      `,\n      variables: {\n        eventId\n      }\n    };\n    try {\n      await graphqlRequest(requestBody.query, requestBody.variables, token);\n    } catch (error) {\n      console.error(error);\n      setError(\"Failed to book the event. Please try again.\");\n    }\n  };\n  return {\n    events,\n    isLoading,\n    error,\n    fetchEvents,\n    createEvent,\n    bookEvent\n  };\n};\n_s(useEvents, \"tl4y2QJpAfc4THHSp9cXQvfNaj0=\", false, function () {\n  return [useSelector];\n});\nexport default useEvents;","map":{"version":3,"names":["useState","useCallback","useSelector","graphqlRequest","useEvents","_s","events","setEvents","isLoading","setIsLoading","error","setError","token","state","auth","fetchEvents","requestBody","query","resData","data","console","createEvent","eventData","variables","title","description","date","price","log","prevEvents","bookEvent","eventId"],"sources":["/Users/rajshah/Desktop/Event-Booking-master/client/src/controller/eventController/eventController.js"],"sourcesContent":["import { useState, useCallback } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { graphqlRequest } from \"../graphqlClient\";\n\nexport const useEvents = () => {\n  const [events, setEvents] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const token = useSelector((state) => state.auth.token);\n\n  const fetchEvents = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);  // Reset error on fetch start\n\n    const requestBody = {\n      query: `\n        query {\n          events {\n            _id\n            title\n            description\n            date\n            price\n\n          }\n        }\n      `\n    };\n\n    try {\n      const resData = await graphqlRequest(requestBody.query, null, token);\n      if (resData && resData.data && resData.data.events) {\n        setEvents(resData.data.events);\n      }\n    } catch (error) {\n      console.error(error); // Log error for debugging\n      setError(\"Failed to load events. Please try again.\");\n    } finally {\n      setIsLoading(false);\n    }\n  }, [token]);  // Make sure to include token if needed\n\n  const createEvent = async (eventData) => {\n    const requestBody = {\n      query: `\n        mutation CreateEvent($title: String!, $description: String!, $date: String!, $price: Float!) {\n          createEvent(eventInput: { title: $title, description: $description, date: $date, price: $price }) {\n            _id\n            title\n            description\n            date\n            price\n            creator {\n              _id\n            }\n          }\n        }\n      `,\n      variables: {\n        title: eventData.title,\n        description: eventData.description,\n        date: eventData.date,\n        price: eventData.price,\n      },\n    };\n\n    try {\n      const resData = await graphqlRequest(requestBody.query, requestBody.variables, token);\n      console.log('Created Event:', resData.data.createEvent);\n\n      // Option 1: Append the new event to the current list\n      setEvents((prevEvents) => [...prevEvents, resData.data.createEvent]);\n\n      // Option 2: Refetch the events list after creating a new event\n      // await fetchEvents();\n\n    } catch (error) {\n      console.error('Failed to create event:', error);\n      setError(\"Failed to create event. Please try again.\");\n    }\n  };\n\n  const bookEvent = async (eventId) => {\n    const requestBody = {\n      query: `\n        mutation BookEvent($eventId: ID!) {\n          bookEvent(eventId: $eventId) {\n            _id\n          }\n        }\n      `,\n      variables: { eventId }\n    };\n\n    try {\n      await graphqlRequest(requestBody.query, requestBody.variables, token);\n    } catch (error) {\n      console.error(error);\n      setError(\"Failed to book the event. Please try again.\");\n    }\n  };\n\n  return {\n    events,\n    isLoading,\n    error,\n    fetchEvents,\n    createEvent,\n    bookEvent,\n  };\n};\n\nexport default useEvents;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}