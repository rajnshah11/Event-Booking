{"ast":null,"code":"export const graphqlRequest = async function (query) {\n  let variables = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let token = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  const requestBody = {\n    query: query,\n    variables: variables\n  };\n  const headers = {\n    \"Content-Type\": \"application/json\"\n  };\n  if (token) {\n    headers.Authorization = \"Bearer \" + token;\n  }\n  try {\n    const res = await fetch(\"http://localhost:8000/graphql\", {\n      method: \"POST\",\n      body: JSON.stringify(requestBody),\n      headers: headers\n    });\n    if (!res.ok) {\n      const errorData = await res.json();\n      const errorMessage = errorData.errors ? errorData.errors[0].message : \"GraphQL request failed!\";\n      throw new Error(errorMessage); // Provide specific error message\n    }\n    const resData = await res.json();\n    return resData;\n  } catch (error) {\n    console.error(\"GraphQL request error:\", error); // Log error to the console for debugging\n    throw error; // Rethrow the error after logging\n  }\n};","map":{"version":3,"names":["graphqlRequest","query","variables","arguments","length","undefined","token","requestBody","headers","Authorization","res","fetch","method","body","JSON","stringify","ok","errorData","json","errorMessage","errors","message","Error","resData","error","console"],"sources":["/Users/rajshah/Desktop/Event-Booking-master/client/src/controller/graphqlClient.js"],"sourcesContent":["export const graphqlRequest = async (query, variables = {}, token = null) => {\n    const requestBody = {\n        query: query,\n        variables: variables\n    };\n\n    const headers = {\n        \"Content-Type\": \"application/json\"\n    };\n\n    if (token) {\n        headers.Authorization = \"Bearer \" + token;\n    }\n\n    try {\n        const res = await fetch(\"http://localhost:8000/graphql\", {\n            method: \"POST\",\n            body: JSON.stringify(requestBody),\n            headers: headers\n        });\n\n        if (!res.ok) {\n            const errorData = await res.json();\n            const errorMessage = errorData.errors ? errorData.errors[0].message : \"GraphQL request failed!\";\n            throw new Error(errorMessage); // Provide specific error message\n        }\n\n        const resData = await res.json();\n        return resData;\n    } catch (error) {\n        console.error(\"GraphQL request error:\", error); // Log error to the console for debugging\n        throw error; // Rethrow the error after logging\n    }\n};\n"],"mappings":"AAAA,OAAO,MAAMA,cAAc,GAAG,eAAAA,CAAOC,KAAK,EAAmC;EAAA,IAAjCC,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAAA,IAAEG,KAAK,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EACpE,MAAMI,WAAW,GAAG;IAChBN,KAAK,EAAEA,KAAK;IACZC,SAAS,EAAEA;EACf,CAAC;EAED,MAAMM,OAAO,GAAG;IACZ,cAAc,EAAE;EACpB,CAAC;EAED,IAAIF,KAAK,EAAE;IACPE,OAAO,CAACC,aAAa,GAAG,SAAS,GAAGH,KAAK;EAC7C;EAEA,IAAI;IACA,MAAMI,GAAG,GAAG,MAAMC,KAAK,CAAC,+BAA+B,EAAE;MACrDC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,WAAW,CAAC;MACjCC,OAAO,EAAEA;IACb,CAAC,CAAC;IAEF,IAAI,CAACE,GAAG,CAACM,EAAE,EAAE;MACT,MAAMC,SAAS,GAAG,MAAMP,GAAG,CAACQ,IAAI,CAAC,CAAC;MAClC,MAAMC,YAAY,GAAGF,SAAS,CAACG,MAAM,GAAGH,SAAS,CAACG,MAAM,CAAC,CAAC,CAAC,CAACC,OAAO,GAAG,yBAAyB;MAC/F,MAAM,IAAIC,KAAK,CAACH,YAAY,CAAC,CAAC,CAAC;IACnC;IAEA,MAAMI,OAAO,GAAG,MAAMb,GAAG,CAACQ,IAAI,CAAC,CAAC;IAChC,OAAOK,OAAO;EAClB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC,CAAC,CAAC;IAChD,MAAMA,KAAK,CAAC,CAAC;EACjB;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}